@helper initDB()
{
    @dropTable("all")
    @createTable()
    @insertCodeLang()
    @insertCodeModule()
}

@helper dropTable(string tableName)
{
    if (tableName == "")
    {
        @_System.getLink("", "", "선택된 테이블이 없습니다.", "")
        return;
    }
    else if (tableName.ToLower() == "all")
    {
        string allTable = "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES";


        try
        {
            foreach (var table in _DB.Query(allTable))
            {   
                @_DB.Execute("DROP TABLE " + table["TABLE_NAME"].ToString())
            }
            @_System.getLink("", "", "테이블이 모두 삭제되었습니다.", "")
        }
        catch
        {
                @_System.getLink("", "", "테이블을 삭제할 수 없습니다.", "")                
        }
        return;
    }
    else if (_DB.Query("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME like '" + tableName + "'").Count == 0)
    {
        @_System.getLink("", "", "존재하지 않는 테이블 입니다.", "")     
        return;
    }
    else
    {
        try
        {
            @_DB.Execute("DROP TABLE " + tableName)
            @_System.getLink("", "", tableName + "이(가) 삭제되었습니다.", "")
        }
        catch
        {
            @_System.getLink("", "", "삭제할 수 없는 테이블 입니다.", "")
        }
        return;
    }   
}

@helper createTable()
{
    try
    {
        foreach (var dir in Directory.GetDirectories(Request.PhysicalApplicationPath + "modules"))
        {   
            if (Directory.GetDirectories(dir).Contains(dir + "\\_setting"))
            {
                try
                {
                    foreach (var file in Directory.GetFiles(dir + "\\_setting"))
                    {                    
                        @_DB.Execute(File.ReadAllText(file, System.Text.Encoding.UTF8))
                    }
                }
                catch (System.Data.SqlServerCe.SqlCeException ex)
                {
                    @_System.getLink("", "", ex.ToString(), "")

                }                
            }
        }
        @_System.getLink("", "", "테이블이 모두 생성 되었습니다.", "")
    }
    catch
    {
        @_System.getLink("", "", "테이블을 생성할 수 없습니다.", "")
    }
    return;
}

@*
@helper insertCodeLayout()
    {
        // rx_code_d_layout
        var db = Database.Open(@AppState["DB_Name"].ToString());

        // table 비우기
        string DELETE_TABLE_SQL = "DELETE FROM " + AppState["table_code_d_layout"];
    @_DB.Execute(DELETE_TABLE_SQL);

                                  // id값 초기화
                                  string ALTER_TABLE_SQL = "ALTER TABLE " + AppState["table_code_d_layout"] + " ALTER COLUMN uid IDENTITY (1,1)";
    @_DB.Execute(ALTER_TABLE_SQL);

                                 // insert data
                                 string cpath = Request.PhysicalApplicationPath + "\\_var\\d_layout\\";

                                 foreach (string files in Directory.GetFiles(cpath))
                                 {
                                     string file_name = files.Substring(cpath.Length, files.Length - cpath.Length);

                                     Array dataRows = File.ReadAllLines(files);

                                     foreach (string data in dataRows)
                                     {
                                         if (data.Trim() == "")
                                         {
                                             continue;
                                         }

                                         string[] item = _System.getArrayString(data);

                                         string INSERT_CODE_SQL = "INSERT INTO " + AppState["table_code_d_layout"] + " (layout,id,id_value) VALUES ('" + item[0] + "','" + item[1] + "','" + item[2] + "');";                       
            @_DB.Execute(INSERT_CODE_SQL);
                                     }
                                 }
}*@

@helper insertCodeModule()
{
    // insert data in rx_code_d_module
    string fileName = Request.PhysicalApplicationPath + "\\_var\\insert_module.txt";
    
    foreach (var line in File.ReadAllLines(fileName))
    {
        @_DB.Execute(line)
    }
}

@helper insertCodeLang()
    {   
        // insert data in rx_code_g_lang
        string cpath = Request.PhysicalApplicationPath + "\\_var\\language\\";

        foreach (string dirs in Directory.GetDirectories(cpath))
        {
            string dirs_name = dirs.Substring(cpath.Length, dirs.Length - cpath.Length);
            foreach (string files in Directory.GetFiles(dirs))
            {
                string file_name = files.Substring(dirs.Length + 1, files.Length - dirs.Length - 1);

                if (file_name == "name.txt")
                {
                    continue;
                }

                Array dataRows = File.ReadAllLines(files);

                foreach (string data in dataRows)
                {
                    if (data.Trim() == "")
                    {
                        continue;
                    }

                    string[] item = _System.getArrayString(data);

                    string INSERT_CODE_SQL = "INSERT INTO " + AppState["table_code_g_lang"] + " (nation,id,id_value,type) VALUES ('" + dirs_name + "','" + item[1] + "','" + item[2] + "','" + item[0] + "');";                
                @_DB.Execute(INSERT_CODE_SQL)
                }
            }
        }
}

@helper moduleSet()
    {
        // rx_s_module 초기화
        var db = Database.Open(@AppState["DB_Name"].ToString());

        // table 비우기
        string DELETE_TABLE_SQL = "DELETE FROM " + AppState["table_s_module"];
    @_DB.Execute(DELETE_TABLE_SQL)

                                  // insert data
                                  string cpath = Request.PhysicalApplicationPath + "\\_var\\module_data\\module_data.cshtml";

                                  foreach (string data in File.ReadAllLines(cpath))
                                  {
                                      if (data.Trim() == "")
                                      {
                                          continue;
                                      }

                                      string[] item = _System.getArrayString(data);

                                      string INSERT_CODE_SQL = "INSERT INTO " + AppState["table_s_module"] + " (gid,system,hidden,mobile,name,id,tblnum,d_regis) VALUES ("
                                          + item[0] + ",'" + item[1] + "','" + item[2] + "','" + item[3] + "','" + item[4] + "','" + item[5] + "','" + item[6] + "',getdate());";                
        @_DB.Execute(INSERT_CODE_SQL);

                                      //File.AppendAllText(Request.PhysicalApplicationPath + "sql_query\\insert_module.txt", INSERT_CODE_SQL + ("\n"), System.Text.Encoding.UTF8);
                                  }
}

@helper insertBbstheme()
    {
        // rx_code_d_bbstheme 초기화
        var db = Database.Open(@AppState["DB_Name"].ToString());

        // table 비우기
        string DELETE_TABLE_SQL = "DELETE FROM " + AppState["table_code_d_bbstheme"];
    @_DB.Execute(DELETE_TABLE_SQL);

                                  // insert data
                                  string cpath = Request.PhysicalApplicationPath + "\\_var\\d_bbstheme\\";

                                  foreach (string dirs in Directory.GetDirectories(cpath))
                                  {
                                      string dirs_name = dirs.Substring(cpath.Length, dirs.Length - cpath.Length);
                                      foreach (string files in Directory.GetFiles(dirs))
                                      {
                                          string file_name = files.Substring(dirs.Length + 1, files.Length - dirs.Length - 1);

                                          if (file_name == "name.txt")
                                          {
                                              continue;
                                          }

                                          Array dataRows = File.ReadAllLines(files);

                                          foreach (string data in dataRows)
                                          {
                                              string KEY = "theme,use_rss,show_catnum,picwidth,picheight,pagenum,search,use_singo,use_print,use_scrap,";
                                              KEY += "use_font,use_comment,use_trackback,use_reply,use_autoresize,show_tag,show_upfile,";
                                              KEY += "show_image,show_list,edit_height,show_edittool2,perm_upload,";
                                              KEY += "perm_photo,show_wtag,show_trackback,use_hidden,show_score1,show_score2,snsping,edit_html,num_upload,num_photo";

                                              string VAL = data.Trim();

                                              string INSERT_THEME_SQL = "INSERT INTO " + AppState["table_code_d_bbstheme"] + " (" + KEY + " ) VALUES (" + VAL + ")";
                @_DB.Execute(INSERT_THEME_SQL);
                                          }
                                      }
                                  }
    
}


@functions {
    //AppState변수 셋팅
    public static object setApp()
    {
        var db = Database.Open(@AppState["DB_Name"].ToString());
        var data_set = new Dictionary<string, string>();

        //string dataFile = Request.PhysicalApplicationPath + "\\_var\\dbinfo\\";

        string getTableName = "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES";
        string table_name = "";

        foreach (var Tbl in _DB.Query(getTableName))
        {
            table_name = Tbl["TABLE_NAME"];

            if (table_name == "rx_bbs_index")
            {   //추후 테이블 수정
                data_set.Add("table_bbsidx", "rx_bbs_index");
            }
            else if (table_name == "rx_s_adminpage")
            {   //추후 테이블 수정
                data_set.Add("table_s_admpage", "rx_s_adminpage");
            }
            else if (table_name.Contains("rx_bbs_"))
            {
                data_set.Add(table_name.Replace("rx_bbs_", "table_bbs"), table_name);
            }
            else if (table_name.Contains("rx_"))
            {
                data_set.Add(table_name.Replace("rx_", "table_"), table_name);
            }

            /*
            else
            {           
                data_set.Add(table_name, table_name);
            }*/
        }

        return data_set;
    }
}